AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app
  
  Sample SAM Template for sam-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 300 #5 minute timeout value


Parameters:
  GmailOAuthToken:
    Description: AWS Parameter Store name that contains the Gmail OAuth token
    Type: AWS::SSM::Parameter::Name
  GmailSearchString:
    Description: Gmail compatible search string
    Type: String
  GoogleDriveOAuthToken:
    Description: AWS Parameter Store name that contains the Google Drive OAuth token
    Type: AWS::SSM::Parameter::Name
  GoogleDriveUploadFolder:
    Description: Folder to upload to within Google Drive
    Type: String

Resources:
  RetrieveFromGmailUploadToGDrive:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Handler: gmail-attacher
      Runtime: go1.x
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
      Role: !GetAtt IamRole.Arn
      Events:
        CatchAll:
          Type: Schedule # More info about a schedule Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#schedule
          Properties:
            Schedule: cron(0 4 ? * SUN *) # Every Sunday at 4am UTC https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          GMAIL_OAUTH_TOKEN: !Ref GmailOAuthToken
          GMAIL_SEARCH_QUERY: !Ref GmailSearchString
          GOOGLE_DRIVE_OAUTH_TOKEN: !Ref GoogleDriveOAuthToken
          GOOGLE_DRIVE_UPLOAD_FOLDER: !Ref GoogleDriveUploadFolder
  IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: "Allow"
          Principal:
            Service:
            - "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
